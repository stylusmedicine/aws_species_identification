View(hard)
controls <- hard %>% filter(grepl("Water",name))
controls2 <- hard %>% filter(grepl("Null",name))
controls <- rbind(controls,controls2)
rm(controls2)
control_names <- controls$name
hard <- hard %>% filter(!name %in% control_names)
controls[6,] <- hard[1,]
View(controls)
rbind(controls,hard[1,])
controls <- rbind(controls,hard[1,])
View(controls)
hard <- hard[-1,]
View(hard)
hard <- hard %>% filter(grepl("SE585",linked_entity_3_parent_sequence_id_attx_name))
hard <- hard %>% filter(grepl("PRO",linked_entity_2_parent_sequence_id_protein_name))
hard <- hard[,c(3,4,6,16,17,22,23,26)]
controls <- controls[,c(3,4,6,16,17,22,23,26)]
dp <- rbind(easy,hard,controls)
View(dp)
names(dp) <- c("sample_id","SAM","lsr","donor_id","donor_plasmid","donor_plasmid_sequence","attx_ID","attX_sequence")
dp$lsr <- NULL
write_csv(dp,"~/Documents/gia/prepared_inputs/PLACEHOLDER/dp.csv")
dp <- fread("~/Documents/gia/prepared_inputs/PLACEHOLDER/meta_ex.csv")
results <- fread("~/Documents/species_id/results/W2RS3T/blast_fastq_sample_1000_reads_ck1.txt")
library(Biostrings)
library(tidyverse)
library(data.table)
library(rentrez)
library(parallel)
results <- fread("~/Documents/species_id/results/W2RS3T/blast_fastq_sample_1000_reads_ck1.txt")
cols <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore",
"sskingdoms", "ssciname")
names(results) <- cols
results <- results[,-c(13:14)]
df <- results
unique_accs <- unique(df$sseqid)
## try batch species
unique_accs <- unique(df$sseqid)
summaries <- entrez_summary(db = "nuccore", id = unique_accs)
get_species_from_ncbi <- function(acc) {
# Attempt to get the NCBI summary
summary_info <- tryCatch(
entrez_summary(db = "nuccore", id = acc),
error = function(e) NULL
)
if (is.null(summary_info)) {
return(NA)  # Return NA if no info found
} else {
return(summary_info$organism)  # 'organism' field has the species name
}
}
species_names <- sapply(unique_accs, get_species_from_ncbi)
species_df <- data.frame(
sseqid = unique_accs,
species = species_names,
stringsAsFactors = FALSE
)
# Merge on the sseqid column
df_with_species <- merge(df, species_df, by = "sseqid", all.x = TRUE)
df_best <- df_with_species %>%
group_by(qseqid, species) %>%
slice_max(bitscore, n = 1, with_ties = FALSE) %>%
ungroup()
# Arrange each qseqid's hits by descending bitscore and assign a rank
df_ranked <- df_best %>%
group_by(qseqid) %>%
arrange(desc(bitscore), .by_group = TRUE) %>%
mutate(rank = row_number()) %>%
ungroup()
# Create a list of ballots, one per qseqid, where each ballot is an ordered vector of species
ballots <- df_ranked %>%
group_by(qseqid) %>%
summarise(ballot = list(species)) %>%
pull(ballot)
irv <- function(ballots) {
remaining <- unique(unlist(ballots))
iteration <- 1
while (TRUE) {
# For each ballot, take the highest-ranked candidate that is still remaining
votes <- sapply(ballots, function(ballot) {
candidate <- ballot[ballot %in% remaining]
if (length(candidate) > 0) candidate[1] else NA
})
counts <- table(votes)
total <- sum(counts)
# Check if any candidate has a majority (>50% of votes)
if (any(counts > total / 2)) {
winner <- names(which(counts > total / 2))
if (iteration == 1) {
percent <- (counts[winner] / total) * 100
return(list(winner = winner, iteration = iteration, percentage = percent))
} else {
return(list(winner = winner, iteration = iteration))
}
}
# Eliminate candidate(s) with the fewest votes.
min_votes <- min(counts)
eliminated <- names(counts)[counts == min_votes]
remaining <- setdiff(remaining, eliminated)
# If only one candidate remains, return it.
if (length(remaining) == 1) {
return(list(winner = remaining, iteration = iteration))
}
# If no candidates remain (all tied), return NA.
if (length(remaining) == 0) {
return(list(winner = NA, iteration = iteration))
}
iteration <- iteration + 1
}
}
winner_irv <- irv(ballots)
if (!is.null(winner_irv$percentage)) {
print(paste("IRV winner:", winner_irv$winner, "won in iteration", winner_irv$iteration,
"with", round(winner_irv$percentage, 2), "% of first-round votes"))
} else {
print(paste("IRV winner:", winner_irv$winner, "won in iteration", winner_irv$iteration))
}
# Get the species with the highest Borda score
winner_borda <- scores_df$species[which.max(scores_df$score)]
print(scores_df)
# Convert to a data frame for easier viewing
scores_df <- data.frame(
species = names(scores),
score = unlist(scores),
stringsAsFactors = FALSE
)
# Get the species with the highest Borda score
winner_borda <- scores_df$species[which.max(scores_df$score)]
print(scores_df)
print(paste("Borda count winner:", winner_borda))
# Compute Borda scores for each species
scores <- list()
for (ballot in ballots) {
# Points: highest ranked gets length(ballot) points, then decreasing by 1
ranks <- seq_along(ballot)
points <- length(ballot) - ranks + 1
for (i in seq_along(ballot)) {
species <- ballot[i]
scores[[species]] <- (scores[[species]] %||% 0) + points[i]
}
}
# Convert to a data frame for easier viewing
scores_df <- data.frame(
species = names(scores),
score = unlist(scores),
stringsAsFactors = FALSE
)
# Get the species with the highest Borda score
winner_borda <- scores_df$species[which.max(scores_df$score)]
print(scores_df)
print(paste("Borda count winner:", winner_borda))
plates <- fread("~/Documents/gia/prepared_inputs/PLACEHOLDER/dp.csv")
names(plates)[1] <- "sample_id"
names(plates)
meta <- fread('~/Documents/gia/prepared_inputs/PLACEHOLDER/GIA_CMMTscreenPCE_031225_MetadataLM.csv')
names(meta)[1] <- "sample_id"
plates <- left_join(plates,meta)
plates <- unique(plates)
plates$attX_length <- nchar(plates$attX_sequence)
plates$primer_seq <- toupper(plates$primer_seq)
plates$donor_plasmid_sequence <- toupper(plates$donor_plasmid_sequence)
plates$attX_sequence <- toupper(plates$attX_sequence)
plates <- plates %>% rowwise() %>%
mutate(primer_start = str_locate(donor_plasmid_sequence, fixed(primer_seq, ignore_case = T))[1]-1,
primer_end = str_locate(donor_plasmid_sequence, fixed(primer_seq, ignore_case = T))[2])
plates <- plates %>% filter(attX_length>1)
plates <- plates %>% rowwise() %>%
mutate(attD_start = str_locate(donor_plasmid_sequence, fixed(attX_sequence, ignore_case = T))[1]-1,
attD_end = str_locate(donor_plasmid_sequence, fixed(attX_sequence, ignore_case = T))[2]) %>%
mutate(core_start = as.integer(attD_start + attX_length/2 -1),
core_end = as.integer(attD_start + attX_length/2 +1)) %>%
mutate(center_start = core_start, center_end = core_end)
View(plates)
process_plate <- function(plate_id) {
# Read and process the plate data
plate <- read_csv(paste0("plate_df_", plate_id, ".csv"),show_col_types = FALSE)
plate$linked_entity_3 <- NULL
plate$linked_entity_3_id <- NULL
plate <- plate %>% filter(complete.cases(.))
plasmid_seq <- read_csv(paste0("donor_plasmid_sequences_", plate_id, ".csv"),show_col_types = FALSE)
plasmid_seq$plasmid_sequence <- toupper(plasmid_seq$plasmid_sequence)
plasmid_seq <- unique(plasmid_seq)
attx_seq <- read_csv(paste0("attx_sequences_", plate_id, ".csv"),show_col_types = FALSE)
attx_seq$attx_sequence <- toupper(attx_seq$attx_sequence)
attx_seq <- unique(attx_seq)
attx_elements <- read_csv(paste0("attx_elements_", plate_id, ".csv"),show_col_types = FALSE)
attx_elements <- unique(attx_elements)
donor_plasmid <- merge(attx_elements, attx_seq, by = "attx_name")
donor_plasmid <- merge(donor_plasmid, plasmid_seq, by = "donor_plasmid")
rm(plasmid_seq, attx_seq, attx_elements)
pro_names <- read_csv(paste0("protein_names_", plate_id, ".csv"),show_col_types = FALSE)
# Merge all data together
plate <- left_join(plate, donor_plasmid, by = "donor_plasmid")
plate <- left_join(plate, pro_names, by = "lsr")
rm(pro_names, donor_plasmid)
plate <- unique(plate)
plate$attX_Length <- nchar(plate$attx_sequence)
plate <- plate[, c("name", "barcode", "well", "lsr", "protein_name", "donor_plasmid", "plasmid_sequence","attx_name","attX_Length", "attx_sequence")]
names(plate) <- c("sampleID", "barcode", "well", "lsr", "protein_name", "donor_plasmid", "donor_plasmid_sequence", "attX", "attX_length", "attX_sequence")
plate <- plate %>% rowwise() %>%
mutate(attD_start = str_locate(donor_plasmid_sequence, fixed(attX_sequence, ignore_case = T))[1]-1,
attD_end = str_locate(donor_plasmid_sequence, fixed(attX_sequence, ignore_case = T))[2]) %>%
mutate(core_start = as.integer(attD_start + attX_length/2 -1),
core_end = as.integer(attD_start + attX_length/2 +1)) %>%
mutate(center_start = core_start, center_end = core_end)
plate$plate_ID <- plate_id
plate <- na.omit(plate)
plate <- data.table(plate)
return(plate)
}
write_fasta_bed_files <- function(plates_df, outdir){
for(i in 1:nrow(plates_df)) {
row <- plates_df[i, ]
plasmid_seq = row$donor_plasmid_sequence
names(plasmid_seq) = row$sampleID
plasmid_seq = DNAStringSet(plasmid_seq)
writeXStringSet(plasmid_seq, paste0(outdir,row$sampleID, ".fasta"))
attx_seq = row$attX_sequence
names(attx_seq) = row$sampleID
attx_seq = DNAStringSet(attx_seq)
writeXStringSet(attx_seq, paste0(outdir,row$sampleID, ".attd.fasta"))
row %>%
dplyr::select(sampleID, primer_start, primer_end, attD_start, attD_end,core_start, core_end, center_start, center_end ) %>%
pivot_longer(cols = ! sampleID, names_to = "location", values_to = "coordinate") %>%
separate(location, c("type", "pos"), "_") %>%
pivot_wider(names_from = pos, values_from = coordinate) %>%
dplyr::select(sampleID, start, end, type) %>%
mutate(add_1 = c(0,0,0,0),
add_2 = c("+", ".",".",".")) -> row_loc
write_tsv(row_loc, paste0(outdir,row$sampleID, ".bed"), col_names = FALSE)
}
}
names(plates)[1] <- "sampleID"
write_fasta_bed_files(plates,"/Users/zachary/Documents/gia/prepared_inputs/PLACEHOLDER/00.donor_map/")
plates$i7_stagger <- toupper(plates$i7_stagger)
plates$max_stagger_len <- nchar(plates$i7_stagger)
if (any(is.na(plates$r2_umi_donor_start) | nchar(plates$r2_umi_donor_start) == 0)) {
plates$r2_umi_donor_start <- -1
plates$r2_umi_donor_end <- -1
}
plates$container_id <- "plt_xpl98YAq"
plates$plate_id <- NULL
plates$well <- NULL
plates$max_stagger_len <- as.character(plates$max_stagger_len)
plates[is.na(plates)] <- ""
write_tsv(plates,"~/Desktop/metadata_additional_info.tsv")
results <- fread("~/Documents/species_id/results/24TGPJ/blast_fastq_sample_100_reads.txt")
library(Biostrings)
library(tidyverse)
library(data.table)
library(rentrez)
library(parallel)
results <- fread("~/Documents/species_id/results/24TGPJ/blast_fastq_sample_100_reads.txt")
cols <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore",
"sskingdoms", "ssciname")
names(results) <- cols
results <- results[,-c(13:14)]
df <- results
unique_accs <- unique(df$sseqid)
get_species_from_ncbi <- function(acc) {
# Attempt to get the NCBI summary
summary_info <- tryCatch(
entrez_summary(db = "nuccore", id = acc),
error = function(e) NULL
)
if (is.null(summary_info)) {
return(NA)  # Return NA if no info found
} else {
return(summary_info$organism)  # 'organism' field has the species name
}
}
species_names <- sapply(unique_accs, get_species_from_ncbi)
species_df <- data.frame(
sseqid = unique_accs,
species = species_names,
stringsAsFactors = FALSE
)
View(species_df)
# Merge on the sseqid column
df_with_species <- merge(df, species_df, by = "sseqid", all.x = TRUE)
df_best <- df_with_species %>%
group_by(qseqid, species) %>%
slice_max(bitscore, n = 1, with_ties = FALSE) %>%
ungroup()
# Arrange each qseqid's hits by descending bitscore and assign a rank
df_ranked <- df_best %>%
group_by(qseqid) %>%
arrange(desc(bitscore), .by_group = TRUE) %>%
mutate(rank = row_number()) %>%
ungroup()
# Create a list of ballots, one per qseqid, where each ballot is an ordered vector of species
ballots <- df_ranked %>%
group_by(qseqid) %>%
summarise(ballot = list(species)) %>%
pull(ballot)
irv <- function(ballots) {
remaining <- unique(unlist(ballots))
iteration <- 1
while (TRUE) {
# For each ballot, take the highest-ranked candidate that is still remaining
votes <- sapply(ballots, function(ballot) {
candidate <- ballot[ballot %in% remaining]
if (length(candidate) > 0) candidate[1] else NA
})
counts <- table(votes)
total <- sum(counts)
# Check if any candidate has a majority (>50% of votes)
if (any(counts > total / 2)) {
winner <- names(which(counts > total / 2))
if (iteration == 1) {
percent <- (counts[winner] / total) * 100
return(list(winner = winner, iteration = iteration, percentage = percent))
} else {
return(list(winner = winner, iteration = iteration))
}
}
# Eliminate candidate(s) with the fewest votes.
min_votes <- min(counts)
eliminated <- names(counts)[counts == min_votes]
remaining <- setdiff(remaining, eliminated)
# If only one candidate remains, return it.
if (length(remaining) == 1) {
return(list(winner = remaining, iteration = iteration))
}
# If no candidates remain (all tied), return NA.
if (length(remaining) == 0) {
return(list(winner = NA, iteration = iteration))
}
iteration <- iteration + 1
}
}
winner_irv <- irv(ballots)
if (!is.null(winner_irv$percentage)) {
print(paste("IRV winner:", winner_irv$winner, "won in iteration", winner_irv$iteration,
"with", round(winner_irv$percentage, 2), "% of first-round votes"))
} else {
print(paste("IRV winner:", winner_irv$winner, "won in iteration", winner_irv$iteration))
}
# Compute Borda scores for each species
scores <- list()
for (ballot in ballots) {
# Points: highest ranked gets length(ballot) points, then decreasing by 1
ranks <- seq_along(ballot)
points <- length(ballot) - ranks + 1
for (i in seq_along(ballot)) {
species <- ballot[i]
scores[[species]] <- (scores[[species]] %||% 0) + points[i]
}
}
# Convert to a data frame for easier viewing
scores_df <- data.frame(
species = names(scores),
score = unlist(scores),
stringsAsFactors = FALSE
)
# Get the species with the highest Borda score
winner_borda <- scores_df$species[which.max(scores_df$score)]
print(scores_df)
print(paste("Borda count winner:", winner_borda))
results <- fread("~/Documents/species_id/results/24TGPJ/blast_fastq_sample_1000_reads.txt")
library(Biostrings)
library(tidyverse)
library(data.table)
library(rentrez)
library(parallel)
results <- fread("~/Documents/species_id/results/24TGPJ/blast_fastq_sample_1000_reads.txt")
cols <- c("qseqid", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore",
"sskingdoms", "ssciname")
names(results) <- cols
results <- results[,-c(13:14)]
df <- results
unique_accs <- unique(df$sseqid)
get_species_from_ncbi <- function(acc) {
# Attempt to get the NCBI summary
summary_info <- tryCatch(
entrez_summary(db = "nuccore", id = acc),
error = function(e) NULL
)
if (is.null(summary_info)) {
return(NA)  # Return NA if no info found
} else {
return(summary_info$organism)  # 'organism' field has the species name
}
}
species_names <- sapply(unique_accs, get_species_from_ncbi)
species_df <- data.frame(
sseqid = unique_accs,
species = species_names,
stringsAsFactors = FALSE
)
# Merge on the sseqid column
df_with_species <- merge(df, species_df, by = "sseqid", all.x = TRUE)
df_best <- df_with_species %>%
group_by(qseqid, species) %>%
slice_max(bitscore, n = 1, with_ties = FALSE) %>%
ungroup()
# Arrange each qseqid's hits by descending bitscore and assign a rank
df_ranked <- df_best %>%
group_by(qseqid) %>%
arrange(desc(bitscore), .by_group = TRUE) %>%
mutate(rank = row_number()) %>%
ungroup()
# Create a list of ballots, one per qseqid, where each ballot is an ordered vector of species
ballots <- df_ranked %>%
group_by(qseqid) %>%
summarise(ballot = list(species)) %>%
pull(ballot)
irv <- function(ballots) {
remaining <- unique(unlist(ballots))
iteration <- 1
while (TRUE) {
# For each ballot, take the highest-ranked candidate that is still remaining
votes <- sapply(ballots, function(ballot) {
candidate <- ballot[ballot %in% remaining]
if (length(candidate) > 0) candidate[1] else NA
})
counts <- table(votes)
total <- sum(counts)
# Check if any candidate has a majority (>50% of votes)
if (any(counts > total / 2)) {
winner <- names(which(counts > total / 2))
if (iteration == 1) {
percent <- (counts[winner] / total) * 100
return(list(winner = winner, iteration = iteration, percentage = percent))
} else {
return(list(winner = winner, iteration = iteration))
}
}
# Eliminate candidate(s) with the fewest votes.
min_votes <- min(counts)
eliminated <- names(counts)[counts == min_votes]
remaining <- setdiff(remaining, eliminated)
# If only one candidate remains, return it.
if (length(remaining) == 1) {
return(list(winner = remaining, iteration = iteration))
}
# If no candidates remain (all tied), return NA.
if (length(remaining) == 0) {
return(list(winner = NA, iteration = iteration))
}
iteration <- iteration + 1
}
}
winner_irv <- irv(ballots)
if (!is.null(winner_irv$percentage)) {
print(paste("IRV winner:", winner_irv$winner, "won in iteration", winner_irv$iteration,
"with", round(winner_irv$percentage, 2), "% of first-round votes"))
} else {
print(paste("IRV winner:", winner_irv$winner, "won in iteration", winner_irv$iteration))
}
# Compute Borda scores for each species
scores <- list()
for (ballot in ballots) {
# Points: highest ranked gets length(ballot) points, then decreasing by 1
ranks <- seq_along(ballot)
points <- length(ballot) - ranks + 1
for (i in seq_along(ballot)) {
species <- ballot[i]
scores[[species]] <- (scores[[species]] %||% 0) + points[i]
}
}
# Convert to a data frame for easier viewing
scores_df <- data.frame(
species = names(scores),
score = unlist(scores),
stringsAsFactors = FALSE
)
# Get the species with the highest Borda score
winner_borda <- scores_df$species[which.max(scores_df$score)]
print(scores_df)
print(paste("Borda count winner:", winner_borda))
library(tidyverse)
library(data.table)
library(openxlsx)
library(Rsamtools)
library(GenomicAlignments)
results <- fread("~/Documents/gta/250221_VL00605_58_AAGLMYLM5/Output/concatenate_metrics/merged.gta_event_counts.tsv")
View(results)
#results$category <- NULL
wide_results <- results %>%
pivot_wider(
names_from = category,   # Create columns from the 'category' values
values_from = umi_count, # Populate those columns with 'umi_count' values
values_fill = list(umi_count = 0) # Fill missing values with 0
)
View(wide_results)
# Specify the file path to the BAM file
bam_file <- "/Users/zachary/Documents/gta/250221_VL00605_58_AAGLMYLM5/Output/categorize_reads/GTA_PT_11_ReStim_1992Nalm6_D11_R3.categorized.csort.bam"
# Define the parameters for scanning the BAM file
param <- ScanBamParam(
what = c("qname", "flag", "rname", "pos", "cigar"),  # Extract read name, flag, chromosome, position, and CIGAR
tag = c("XC")  # Include the 'XC' tag if available
)
# Scan the BAM file
alignments <- scanBam(bam_file, param = param)[[1]]
# Convert alignments to a data.frame
alignments_df <- data.frame(
qname = alignments$qname,          # Read name
flag = alignments$flag,            # SAM flag
chrom = alignments$rname,          # Chromosome
pos = alignments$pos,              # Start position
cigar = alignments$cigar,          # CIGAR string
XC = alignments$tag$XC,            # Category tag (XC), if available
stringsAsFactors = FALSE
)
View(alignments_df)
SVs <- alignments_df %>% filter(XC == "SV")
View(SVs)
